// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineCourse.DAL.Contexts;

#nullable disable

namespace OnlineCourse.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineCourse.Domain.Entities.CourseCategories.CourseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 15, 50, 35, 824, DateTimeKind.Local).AddTicks(9046),
                            Description = ".Net is Cross Platform",
                            Name = ".Net"
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 15, 50, 35, 824, DateTimeKind.Local).AddTicks(9055),
                            Description = "Foundation is beginner program!",
                            Name = "Foundation"
                        });
                });

            modelBuilder.Entity("OnlineCourse.Domain.Entities.Courses.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(9029),
                            EndDate = new DateTime(2023, 10, 27, 19, 0, 0, 0, DateTimeKind.Utc),
                            OrderId = 1L,
                            Price = 11150000.0,
                            StartDate = new DateTime(2023, 6, 6, 19, 0, 0, 0, DateTimeKind.Utc),
                            StudentId = 8L,
                            TeacherId = 2L
                        });
                });

            modelBuilder.Entity("OnlineCourse.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaymment")
                        .HasColumnType("boolean");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8986),
                            IsPaymment = true,
                            PaymentMethod = 2
                        });
                });

            modelBuilder.Entity("OnlineCourse.Domain.Entities.Students.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8663),
                            DateOfBirth = new DateTime(2001, 9, 10, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "farruhulashov@gmail.com",
                            FirstName = "Farruh",
                            LastName = "Ulashov",
                            Phone = "+998905201669"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8667),
                            DateOfBirth = new DateTime(2002, 8, 9, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "samandaraliyev@gmail.com",
                            FirstName = "Samandar",
                            LastName = "Aliyev",
                            Phone = "+998912024099"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8669),
                            DateOfBirth = new DateTime(2003, 8, 5, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "nurullonurmatov@gmail.com",
                            FirstName = "Nurullo",
                            LastName = "Nurmatov",
                            Phone = "+998942240816"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8671),
                            DateOfBirth = new DateTime(2002, 4, 12, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "nodirbeknorboyev@gmail.com",
                            FirstName = "Nodirbek",
                            LastName = "Norboyev",
                            Phone = "+998903446861"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8674),
                            DateOfBirth = new DateTime(2003, 9, 10, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "abbosxonrisqulov1@gmail.com",
                            FirstName = "Abbosxon",
                            LastName = "Risqulov",
                            Phone = "+998911473900"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8676),
                            DateOfBirth = new DateTime(2003, 6, 9, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "elbekabdumannonov@gmail.com",
                            FirstName = "Elbek",
                            LastName = "Abdumannonov",
                            Phone = "+998916861910"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8679),
                            DateOfBirth = new DateTime(2003, 4, 3, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "manguberdimominov@gmail.com",
                            FirstName = "Manguberdi",
                            LastName = "Mo'minov",
                            Phone = "+998999941696"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8681),
                            DateOfBirth = new DateTime(2002, 7, 10, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mansurjonmoydinov1@gmail.com",
                            FirstName = "Mansurjon",
                            LastName = "Mo'ydinov",
                            Phone = "+998908515979"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8683),
                            DateOfBirth = new DateTime(2003, 11, 10, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "xayrullaeshqobilov1@gmail.com",
                            FirstName = "Xayrulla",
                            LastName = "Eshqobilov",
                            Phone = "+998942224468"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(8686),
                            DateOfBirth = new DateTime(2003, 3, 3, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "samandarabdunazarov@gmail.com",
                            FirstName = "Samandar",
                            LastName = "Abdunazarov",
                            Phone = "+998888103636"
                        });
                });

            modelBuilder.Entity("OnlineCourse.Domain.Entities.Teachers.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experince")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeacherLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(9008),
                            DateOfBirth = new DateTime(1998, 2, 1, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jamshidmaruf@gmail.com",
                            Experince = 3,
                            FirstName = "Jamshid",
                            LastName = "Maruf",
                            Phone = "+998 97 577 75 52",
                            Speciality = ".Net",
                            TeacherLevel = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 10, 10, 50, 35, 824, DateTimeKind.Utc).AddTicks(9012),
                            DateOfBirth = new DateTime(1986, 9, 8, 19, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alisherkasimov@gmail.com",
                            Experince = 7,
                            FirstName = "Alisher",
                            LastName = "Kasimov",
                            Phone = "+998990787878",
                            Speciality = "Foundation",
                            TeacherLevel = 2
                        });
                });

            modelBuilder.Entity("OnlineCourse.Domain.Entities.CourseCategories.CourseCategory", b =>
                {
                    b.HasOne("OnlineCourse.Domain.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineCourse.Domain.Entities.Courses.Course", b =>
                {
                    b.HasOne("OnlineCourse.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OnlineCourse.Domain.Entities.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourse.Domain.Entities.Teachers.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
